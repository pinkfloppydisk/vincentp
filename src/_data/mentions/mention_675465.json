{"type":"entry","author":{"type":"card","name":"Mark Groves","photo":"","url":"https://markgroves.us"},"url":"https://markgroves.us/2019/08/24/adding-webmentions-to-a-static-site-via-github/","published":"2019-08-24T23:14:00+00:00","wm-received":"2019-08-24T23:54:02Z","wm-id":675465,"wm-source":"https://markgroves.us/2019/08/24/adding-webmentions-to-a-static-site-via-github/","wm-target":"https://vincentp.me/articles/2018/11/14/20-00/","name":"Adding Webmentions to a static site via GitHub","content":{"html":"<p>Over the last several weeks, I decided to build my site from the ground up using <a href=\"https://gohugo.io\">Hugo</a>, a static site generator. My main goal in rebuilding my website is to get back into writing while having a place on the web that is my own.</p>\n\n<p>I am adding features of the IndieWeb to my site along the way.</p>\n\n<p>My latest IndieWeb support is implementing Webmentions. With the help from posts by <a href=\"https://vincentp.me/articles/2018/11/14/20-00/\">Vincent Pickering</a>, <a href=\"https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/\">Keith Grant</a>, and <a href=\"https://mxb.dev/blog/using-webmentions-on-static-sites/\">Max Böck</a> I was able to add initial support for Webmentions to my Hugo based site.</p>\n\n<h2>What are Webmentions?</h2>\n\n<p><a href=\"https://webmention.net/draft/\">Webmentions</a> is a W3C recommendation that enables site owners to send and receive notifications for reactions posted from other sites. A Webmention reaction can be when someone posts a blog post linking to one of your posts. Or, using services such as <a href=\"https://brid.gy/\">Bridgy</a> your site can receive likes and re-posts from services such as Twitter.</p>\n\n<h2>Challenge without JavaScript</h2>\n\n<p>The main benefits of using static site generators, such as Hugo or Jekyll, is the performance of only needing to serve up HTML and CSS. Adding significant logic in JavaScript defeats these benefits, in my opinion.</p>\n\n<p>Posts on this site use a git-based flow, that starts with a merge into the master branch on GitHub. This merge kicks off a build within <a href=\"https://netlify.com\">Netlify</a> that host this site.</p>\n\n<p>The challenge of using a GitHub-to-Netlify deployment flow is that the site doesn’t change unless something has changed within the git repository. Figuring out how to get data from a new Webmention to change my git repository was what I needed to figure out.</p>\n\n<h2>Solution</h2>\n\n<p>Vincent’s post got me pretty far down the line of figuring out a solution to this problem. In his post, he outlines how to use Jekyll data files and a server he calls <a href=\"https://github.com/vipickering/mastr-cntrl\">Mastr-Cntrl</a> to post to his git repository. Since Hugo also has <a href=\"https://gohugo.io/templates/data-templates/\">data files</a>, I knew I was on to something. But, I was hoping I didn’t need to stand up a server to listen for Webmentions.</p>\n\n<p>To get this to work without the need for a running server, I set off to find a solution that would look more like a serverless function. The workflow I wanted looked like this:</p>\n\n<pre><code>webmetion.io &gt; webhook &gt; create data file &gt; pull request &gt; merge &gt; build &gt; deploy\n</code></pre>\n\n<ol><li>Webmention notifications would first go to <a href=\"https://webmentions.io\">webmentions.io</a> by adding my site’s Webmention endpoint to the HTML header.</li>\n</ol><pre><code>&lt;link rel=\"webmention\" href=\"https://webmention.io/markgroves.us/webmention\" /&gt;\n&lt;link rel=\"pingback\" href=\"https://webmention.io/markgroves.us/xmlrpc\" /&gt;\n</code></pre>\n\n<ol><li>Next, I needed something to listen for <a href=\"https://webmention.io/settings/webhooks\">webhook events</a> from webmentions.io.\n<br /></li>\n</ol><p>The <a href=\"https://www.integromat.com\">Integromat</a> service came to the rescue. Integromat is similar to Zapier or IFTTT, but, it supports creating a webhook endpoint, and also has an integration to GitHub that supports creating files within your git repository.</p>\n\n<ol><li>Parse Webmention JSON within Integromat and save a file to /data/webmention folder.</li>\n</ol><p><img src=\"https://markgroves.us/images/Integration_Webhooks__JSON___Integromat.png\" alt=\"webhook to JSON to GitHub\" /></p>\n\n<p>Now, each time a webmentions.io picks up a Webmention for one of my posts, Integromat will create a new file within a git branch using the wm-id from the JSON send over in the webhook.</p>\n\n<p><img src=\"https://markgroves.us/images/Integration_Webhooks__JSON___Integromat_details.png\" alt=\"GitHub configuration detail\" /></p>\n\n<h3>Leveraging GitHub pull requests</h3>\n\n<p>One of the benefits of using GitHub for managing your web site is that you have complete control on when changes get deployed. Since I want to make sure the Webmentions I am going to add to my site are appropriate, I decided to leverage pull-requests within GitHub.</p>\n\n<p>By posting the Webmention JSON file into a separate branch, I can review the changes before merging them with the master branch and ultimately publishing publicly.</p>\n\n<h3>Automating Git check-ins - Integromat</h3>\n\n<p>At this point, Integromat is an experiment. I don’t expect enough traffic on my site to need to upgrade to a paid plan. But, even at $9 a month, if this solution continues to work, it will be worth it.</p>\n\n<h2>Formatting Webmentions using Hugo</h2>\n\n<p>At this point, the remaining work is to pull the data from the data files into the matching posts. I added a partial template to my Hugo theme named <a href=\"https://github.com/markgrovs/hugo-theme-hello-friend-ng/blob/master/layouts/partials/webmentions.html\">webmentions.html</a>. For each reaction type, I format the reaction to match my theme:</p>\n\n<pre><code>&lt;div class=\"pagination__title\"&gt;\n        &lt;span class=\"pagination__title-h\"&gt;Replies&lt;/span&gt;\n        &lt;hr/&gt;\n    &lt;/div&gt;\n    {{ range .Site.Data.webmentions }}\n        {{ range . }}\n            {{ if isset . \"wm-property\" }} \n                {{ if eq (index . \"wm-property\") \"in-reply-to\" }}\n\n                    &lt;div class=\"u-comment h-cite\"&gt;\n                        &lt;a class=\"u-author h-card\" {{- if .author.url -}} href=\"{{ .author.url }}\" {{ end }}&gt;            \n                            {{ .author.name | humanize }}\n                        &lt;/a&gt;\n                    &lt;/p&gt;\n                        &lt;p class=\"e-content e-name\"&gt;\n                            {{- .content.html | safeHTML }}\n                        &lt;/p&gt;\n                        &lt;a class=\"u-url\" href=\"{{ .url }}\"&gt;\n                            {{ .url }}\n                        &lt;/a&gt;\n                        &amp;nbsp;@\n                        &lt;time class=\"dt-published\"&gt;{{ if .published }}{{ dateFormat $.Site.Params.dateformNumTime .published }}{{ end }}&lt;/time&gt;  \n                    &lt;/div&gt;\n                    &lt;hr/&gt;\n                {{ end }}\n            {{ end }}\n        {{ end }}\n    {{ end }}\n</code></pre>\n\n<h2>Conclusion</h2>\n\n<p>Although I don’t expect to have significant traffic on my site, I wanted a process that fit my goals of having a static website with low maintenance.</p>\n\n<p>Getting this to work was a bit complex, but I learned a good bit about how Hugo works along the way. Feel free to contact me if you have any questions.</p>","text":"Over the last several weeks, I decided to build my site from the ground up using Hugo, a static site generator. My main goal in rebuilding my website is to get back into writing while having a place on the web that is my own.\n\nI am adding features of the IndieWeb to my site along the way.\n\nMy latest IndieWeb support is implementing Webmentions. With the help from posts by Vincent Pickering, Keith Grant, and Max Böck I was able to add initial support for Webmentions to my Hugo based site.\n\nWhat are Webmentions?\n\nWebmentions is a W3C recommendation that enables site owners to send and receive notifications for reactions posted from other sites. A Webmention reaction can be when someone posts a blog post linking to one of your posts. Or, using services such as Bridgy your site can receive likes and re-posts from services such as Twitter.\n\nChallenge without JavaScript\n\nThe main benefits of using static site generators, such as Hugo or Jekyll, is the performance of only needing to serve up HTML and CSS. Adding significant logic in JavaScript defeats these benefits, in my opinion.\n\nPosts on this site use a git-based flow, that starts with a merge into the master branch on GitHub. This merge kicks off a build within Netlify that host this site.\n\nThe challenge of using a GitHub-to-Netlify deployment flow is that the site doesn’t change unless something has changed within the git repository. Figuring out how to get data from a new Webmention to change my git repository was what I needed to figure out.\n\nSolution\n\nVincent’s post got me pretty far down the line of figuring out a solution to this problem. In his post, he outlines how to use Jekyll data files and a server he calls Mastr-Cntrl to post to his git repository. Since Hugo also has data files, I knew I was on to something. But, I was hoping I didn’t need to stand up a server to listen for Webmentions.\n\nTo get this to work without the need for a running server, I set off to find a solution that would look more like a serverless function. The workflow I wanted looked like this:\n\nwebmetion.io > webhook > create data file > pull request > merge > build > deploy\n\n\nWebmention notifications would first go to webmentions.io by adding my site’s Webmention endpoint to the HTML header.\n<link rel=\"webmention\" href=\"https://webmention.io/markgroves.us/webmention\" />\n<link rel=\"pingback\" href=\"https://webmention.io/markgroves.us/xmlrpc\" />\n\n\nNext, I needed something to listen for webhook events from webmentions.io.\n\n\nThe Integromat service came to the rescue. Integromat is similar to Zapier or IFTTT, but, it supports creating a webhook endpoint, and also has an integration to GitHub that supports creating files within your git repository.\n\nParse Webmention JSON within Integromat and save a file to /data/webmention folder.\n\n\nNow, each time a webmentions.io picks up a Webmention for one of my posts, Integromat will create a new file within a git branch using the wm-id from the JSON send over in the webhook.\n\n\n\nLeveraging GitHub pull requests\n\nOne of the benefits of using GitHub for managing your web site is that you have complete control on when changes get deployed. Since I want to make sure the Webmentions I am going to add to my site are appropriate, I decided to leverage pull-requests within GitHub.\n\nBy posting the Webmention JSON file into a separate branch, I can review the changes before merging them with the master branch and ultimately publishing publicly.\n\nAutomating Git check-ins - Integromat\n\nAt this point, Integromat is an experiment. I don’t expect enough traffic on my site to need to upgrade to a paid plan. But, even at $9 a month, if this solution continues to work, it will be worth it.\n\nFormatting Webmentions using Hugo\n\nAt this point, the remaining work is to pull the data from the data files into the matching posts. I added a partial template to my Hugo theme named webmentions.html. For each reaction type, I format the reaction to match my theme:\n\n<div class=\"pagination__title\">\n        <span class=\"pagination__title-h\">Replies</span>\n        <hr/>\n    </div>\n    {{ range .Site.Data.webmentions }}\n        {{ range . }}\n            {{ if isset . \"wm-property\" }} \n                {{ if eq (index . \"wm-property\") \"in-reply-to\" }}\n\n                    <div class=\"u-comment h-cite\">\n                        <a class=\"u-author h-card\" {{- if .author.url -}} href=\"{{ .author.url }}\" {{ end }}>            \n                            {{ .author.name | humanize }}\n                        </a>\n                    </p>\n                        <p class=\"e-content e-name\">\n                            {{- .content.html | safeHTML }}\n                        </p>\n                        <a class=\"u-url\" href=\"{{ .url }}\">\n                            {{ .url }}\n                        </a>\n                        &nbsp;@\n                        <time class=\"dt-published\">{{ if .published }}{{ dateFormat $.Site.Params.dateformNumTime .published }}{{ end }}</time>  \n                    </div>\n                    <hr/>\n                {{ end }}\n            {{ end }}\n        {{ end }}\n    {{ end }}\n\n\nConclusion\n\nAlthough I don’t expect to have significant traffic on my site, I wanted a process that fit my goals of having a static website with low maintenance.\n\nGetting this to work was a bit complex, but I learned a good bit about how Hugo works along the way. Feel free to contact me if you have any questions."},"mention-of":"https://vincentp.me/articles/2018/11/14/20-00/","wm-property":"mention-of","wm-private":false}